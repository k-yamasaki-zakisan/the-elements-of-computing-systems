<class>
<keyword> class </keyword>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Main </identifier>
<symbol> { </symbol>
<subroutineDec>
<keyword> function </keyword>
<keyword> void </keyword>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> main </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<IdentifierInfo> declaration: True, kind: 3, index: 0 </IdentifierInfo>
<identifier> temp </identifier>
<symbol> ; </symbol>
</varDec>
<varDec>
<keyword> var </keyword>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Array </identifier>
<IdentifierInfo> declaration: True, kind: 3, index: 1 </IdentifierInfo>
<identifier> a </identifier>
<symbol> , </symbol>
<IdentifierInfo> declaration: True, kind: 3, index: 2 </IdentifierInfo>
<identifier> b </identifier>
<symbol> , </symbol>
<IdentifierInfo> declaration: True, kind: 3, index: 3 </IdentifierInfo>
<identifier> c </identifier>
<symbol> ; </symbol>
</varDec>
<statements>
<doStatement>
<keyword> do </keyword>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Memory </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> poke </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 8000 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 333 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<IdentifierInfo> declaration: False, kind: 3, index: 0 </IdentifierInfo>
<identifier> temp </identifier>
<symbol> = </symbol>
<expression>
<term>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Memory </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> peek </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 8000 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Memory </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> poke </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 8001 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<IdentifierInfo> declaration: False, kind: 3, index: 0 </IdentifierInfo>
<identifier> temp </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<IdentifierInfo> declaration: False, kind: 3, index: 1 </IdentifierInfo>
<identifier> a </identifier>
<symbol> = </symbol>
<expression>
<term>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Array </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> new </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<IdentifierInfo> declaration: False, kind: 3, index: 1 </IdentifierInfo>
<identifier> a </identifier>
<symbol> [ </symbol>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 222 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Memory </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> poke </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 8002 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<IdentifierInfo> declaration: False, kind: 3, index: 1 </IdentifierInfo>
<identifier> a </identifier>
<symbol> [ </symbol>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ] </symbol>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<IdentifierInfo> declaration: False, kind: 3, index: 2 </IdentifierInfo>
<identifier> b </identifier>
<symbol> = </symbol>
<expression>
<term>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Array </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> new </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<IdentifierInfo> declaration: False, kind: 3, index: 2 </IdentifierInfo>
<identifier> b </identifier>
<symbol> [ </symbol>
<expression>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<IdentifierInfo> declaration: False, kind: 3, index: 1 </IdentifierInfo>
<identifier> a </identifier>
<symbol> [ </symbol>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ] </symbol>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 100 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Memory </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> poke </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 8003 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<IdentifierInfo> declaration: False, kind: 3, index: 2 </IdentifierInfo>
<identifier> b </identifier>
<symbol> [ </symbol>
<expression>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ] </symbol>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<IdentifierInfo> declaration: False, kind: 3, index: 3 </IdentifierInfo>
<identifier> c </identifier>
<symbol> = </symbol>
<expression>
<term>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Array </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> new </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 500 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<IdentifierInfo> declaration: False, kind: 3, index: 3 </IdentifierInfo>
<identifier> c </identifier>
<symbol> [ </symbol>
<expression>
<term>
<integerConstant> 499 </integerConstant>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<IdentifierInfo> declaration: False, kind: 3, index: 1 </IdentifierInfo>
<identifier> a </identifier>
<symbol> [ </symbol>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ] </symbol>
</term>
<symbol> - </symbol>
<term>
<IdentifierInfo> declaration: False, kind: 3, index: 2 </IdentifierInfo>
<identifier> b </identifier>
<symbol> [ </symbol>
<expression>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ] </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Memory </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> poke </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 8004 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<IdentifierInfo> declaration: False, kind: 3, index: 3 </IdentifierInfo>
<identifier> c </identifier>
<symbol> [ </symbol>
<expression>
<term>
<integerConstant> 499 </integerConstant>
</term>
</expression>
<symbol> ] </symbol>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<IdentifierInfo> declaration: False, kind: 3, index: 1 </IdentifierInfo>
<identifier> a </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<IdentifierInfo> declaration: False, kind: 3, index: 2 </IdentifierInfo>
<identifier> b </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<IdentifierInfo> declaration: False, kind: 3, index: 2 </IdentifierInfo>
<identifier> b </identifier>
<symbol> = </symbol>
<expression>
<term>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Array </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> new </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<IdentifierInfo> declaration: False, kind: 3, index: 2 </IdentifierInfo>
<identifier> b </identifier>
<symbol> [ </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<IdentifierInfo> declaration: False, kind: 3, index: 3 </IdentifierInfo>
<identifier> c </identifier>
<symbol> [ </symbol>
<expression>
<term>
<integerConstant> 499 </integerConstant>
</term>
</expression>
<symbol> ] </symbol>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 90 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Memory </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> poke </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 8005 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<IdentifierInfo> declaration: False, kind: 3, index: 2 </IdentifierInfo>
<identifier> b </identifier>
<symbol> [ </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ] </symbol>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<IdentifierInfo> declaration: False, kind: 3, index: 3 </IdentifierInfo>
<identifier> c </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<IdentifierInfo> declaration: False, kind: 3, index: 2 </IdentifierInfo>
<identifier> b </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<symbol> } </symbol>
</class>
