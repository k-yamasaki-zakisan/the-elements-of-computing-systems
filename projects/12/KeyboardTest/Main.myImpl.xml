<class>
<keyword> class </keyword>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Main </identifier>
<symbol> { </symbol>
<subroutineDec>
<keyword> function </keyword>
<keyword> void </keyword>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> main </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<keyword> char </keyword>
<IdentifierInfo> declaration: True, kind: 3, index: 0 </IdentifierInfo>
<identifier> c </identifier>
<symbol> , </symbol>
<IdentifierInfo> declaration: True, kind: 3, index: 1 </IdentifierInfo>
<identifier> key </identifier>
<symbol> ; </symbol>
</varDec>
<varDec>
<keyword> var </keyword>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> String </identifier>
<IdentifierInfo> declaration: True, kind: 3, index: 2 </IdentifierInfo>
<identifier> s </identifier>
<symbol> ; </symbol>
</varDec>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<IdentifierInfo> declaration: True, kind: 3, index: 3 </IdentifierInfo>
<identifier> i </identifier>
<symbol> ; </symbol>
</varDec>
<varDec>
<keyword> var </keyword>
<keyword> boolean </keyword>
<IdentifierInfo> declaration: True, kind: 3, index: 4 </IdentifierInfo>
<identifier> ok </identifier>
<symbol> ; </symbol>
</varDec>
<statements>
<letStatement>
<keyword> let </keyword>
<IdentifierInfo> declaration: False, kind: 3, index: 4 </IdentifierInfo>
<identifier> ok </identifier>
<symbol> = </symbol>
<expression>
<term>
<keyword> false </keyword>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Output </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> printString </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<stringConstant> keyPressed test: </stringConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Output </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> println </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<IdentifierInfo> declaration: False, kind: 3, index: 4 </IdentifierInfo>
<identifier> ok </identifier>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Output </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> printString </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<stringConstant> Please press the 'Page Down' key </stringConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<IdentifierInfo> declaration: False, kind: 3, index: 1 </IdentifierInfo>
<identifier> key </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<IdentifierInfo> declaration: False, kind: 3, index: 1 </IdentifierInfo>
<identifier> key </identifier>
<symbol> = </symbol>
<expression>
<term>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Keyboard </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> keyPressed </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<letStatement>
<keyword> let </keyword>
<IdentifierInfo> declaration: False, kind: 3, index: 0 </IdentifierInfo>
<identifier> c </identifier>
<symbol> = </symbol>
<expression>
<term>
<IdentifierInfo> declaration: False, kind: 3, index: 1 </IdentifierInfo>
<identifier> key </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<IdentifierInfo> declaration: False, kind: 3, index: 1 </IdentifierInfo>
<identifier> key </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<IdentifierInfo> declaration: False, kind: 3, index: 1 </IdentifierInfo>
<identifier> key </identifier>
<symbol> = </symbol>
<expression>
<term>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Keyboard </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> keyPressed </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<doStatement>
<keyword> do </keyword>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Output </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> println </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<IdentifierInfo> declaration: False, kind: 3, index: 0 </IdentifierInfo>
<identifier> c </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 137 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Output </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> printString </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<stringConstant> ok </stringConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Output </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> println </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<IdentifierInfo> declaration: False, kind: 3, index: 4 </IdentifierInfo>
<identifier> ok </identifier>
<symbol> = </symbol>
<expression>
<term>
<keyword> true </keyword>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<letStatement>
<keyword> let </keyword>
<IdentifierInfo> declaration: False, kind: 3, index: 4 </IdentifierInfo>
<identifier> ok </identifier>
<symbol> = </symbol>
<expression>
<term>
<keyword> false </keyword>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Output </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> printString </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<stringConstant> readChar test: </stringConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Output </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> println </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Output </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> printString </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<stringConstant> (Verify that the pressed character is echoed to the screen) </stringConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Output </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> println </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<IdentifierInfo> declaration: False, kind: 3, index: 4 </IdentifierInfo>
<identifier> ok </identifier>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Output </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> printString </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<stringConstant> Please press the number '3':  </stringConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<IdentifierInfo> declaration: False, kind: 3, index: 0 </IdentifierInfo>
<identifier> c </identifier>
<symbol> = </symbol>
<expression>
<term>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Keyboard </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> readChar </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Output </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> println </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<IdentifierInfo> declaration: False, kind: 3, index: 0 </IdentifierInfo>
<identifier> c </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 51 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Output </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> printString </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<stringConstant> ok </stringConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Output </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> println </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<IdentifierInfo> declaration: False, kind: 3, index: 4 </IdentifierInfo>
<identifier> ok </identifier>
<symbol> = </symbol>
<expression>
<term>
<keyword> true </keyword>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<letStatement>
<keyword> let </keyword>
<IdentifierInfo> declaration: False, kind: 3, index: 4 </IdentifierInfo>
<identifier> ok </identifier>
<symbol> = </symbol>
<expression>
<term>
<keyword> false </keyword>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Output </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> printString </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<stringConstant> readLine test: </stringConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Output </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> println </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Output </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> printString </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<stringConstant> (Verify echo and usage of 'backspace') </stringConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Output </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> println </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<IdentifierInfo> declaration: False, kind: 3, index: 4 </IdentifierInfo>
<identifier> ok </identifier>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<IdentifierInfo> declaration: False, kind: 3, index: 2 </IdentifierInfo>
<identifier> s </identifier>
<symbol> = </symbol>
<expression>
<term>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Keyboard </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> readLine </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<stringConstant> Please type 'JACK' and press enter:  </stringConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<IdentifierInfo> declaration: False, kind: 3, index: 2 </IdentifierInfo>
<identifier> s </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> length </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<IdentifierInfo> declaration: False, kind: 3, index: 2 </IdentifierInfo>
<identifier> s </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> charAt </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 74 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<IdentifierInfo> declaration: False, kind: 3, index: 2 </IdentifierInfo>
<identifier> s </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> charAt </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 65 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<IdentifierInfo> declaration: False, kind: 3, index: 2 </IdentifierInfo>
<identifier> s </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> charAt </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 67 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<IdentifierInfo> declaration: False, kind: 3, index: 2 </IdentifierInfo>
<identifier> s </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> charAt </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 75 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Output </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> printString </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<stringConstant> ok </stringConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Output </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> println </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<IdentifierInfo> declaration: False, kind: 3, index: 4 </IdentifierInfo>
<identifier> ok </identifier>
<symbol> = </symbol>
<expression>
<term>
<keyword> true </keyword>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<letStatement>
<keyword> let </keyword>
<IdentifierInfo> declaration: False, kind: 3, index: 4 </IdentifierInfo>
<identifier> ok </identifier>
<symbol> = </symbol>
<expression>
<term>
<keyword> false </keyword>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Output </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> printString </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<stringConstant> readInt test: </stringConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Output </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> println </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Output </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> printString </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<stringConstant> (Verify echo and usage of 'backspace') </stringConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Output </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> println </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<IdentifierInfo> declaration: False, kind: 3, index: 4 </IdentifierInfo>
<identifier> ok </identifier>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<IdentifierInfo> declaration: False, kind: 3, index: 3 </IdentifierInfo>
<identifier> i </identifier>
<symbol> = </symbol>
<expression>
<term>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Keyboard </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> readInt </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<stringConstant> Please type '-32123' and press enter:  </stringConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<IdentifierInfo> declaration: False, kind: 3, index: 3 </IdentifierInfo>
<identifier> i </identifier>
</term>
<symbol> = </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> - </symbol>
<term>
<integerConstant> 32123 </integerConstant>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Output </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> printString </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<stringConstant> ok </stringConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Output </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> println </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<IdentifierInfo> declaration: False, kind: 3, index: 4 </IdentifierInfo>
<identifier> ok </identifier>
<symbol> = </symbol>
<expression>
<term>
<keyword> true </keyword>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<doStatement>
<keyword> do </keyword>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Output </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> println </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<IdentifierInfo> category: class </IdentifierInfo>
<identifier> Output </identifier>
<symbol> . </symbol>
<IdentifierInfo> category: subroutine </IdentifierInfo>
<identifier> printString </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<stringConstant> Test completed successfully </stringConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<symbol> } </symbol>
</class>
